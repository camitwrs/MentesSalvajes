# nixpacks.toml

# Configuración específica para el servicio 'frontend'
[phases.frontend.build]
commands = [
    "cd frontend && npm install",
    "cd frontend && npm run build"
]

[phases.frontend.start]
# Comando para iniciar el servidor web para archivos estáticos
# Nixpacks usará el directorio por defecto (que será /app/frontend/dist)
# y servirá el contenido.
# Aquí no necesitas especificar un comando, Nixpacks lo hará automáticamente.
# Si esto no funciona, podemos usar 'caddy' o 'nginx' o 'serve' explícitamente aquí.
# Pero intentaremos dejarlo para que Nixpacks lo detecte.

# Opcional: Si necesitas un comando de inicio muy específico, aquí va:
# Aquí puedes especificar una ruta para el ejecutable como Caddy
# o incluso usar 'npx serve' si estás seguro que está en el PATH
# commands = ["cd frontend/dist && npx serve -l $PORT"]

# Esto es lo que suele funcionar para SPAs:
# Nixpacks detecta que hay un directorio de salida de build
# y sirve el contenido directamente, no se necesita un comando 'start' explícito para la 'frontend'
# porque la fase 'start' para un static asset server está implicitamente manejada por Nixpacks.
# Esto es solo para decirle a Nixpacks que "sirva" el frontend.
# Si Railway insiste en un start command, podemos volver a 'serve' o 'caddy'.


# Para el backend, definimos explícitamente su fase de inicio
[phases.backend.start]
commands = ["cd backend && npm start"]

# Configuración del servidor web (Caddy) si Nixpacks lo detecta por defecto
# Esto solo es necesario si estás sirviendo HTML/CSS/JS directamente y Caddy
# es tu servidor.
# [start]
# cmd = "caddy start --config /assets/Caddyfile --adapter caddyfile"

# Configuración del Caddyfile para Nixpacks (si se genera automáticamente)
# Esto es más un control fino sobre cómo Caddy se configura internamente
# [caddy]
# root = "/app/frontend/dist" # Le dice a Caddy dónde están tus archivos